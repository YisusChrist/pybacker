#!/usr/bin/env python3

"""
@file     pybacker
@date     20/03/2023
@version  0.0.2
@license  GNU General Public License v2.0
@url      https://github.com/YisusChrist/pybacker
@author   Alejandro Gonzalez Momblan
"""

import os
import subprocess
import sys
import time

"""
    # System
    #   Themes
    "/usr/share/themes/adw-gtk3",
    "/usr/share/themes/adw-gtk3-dark",

    # User
    "/home/omega/Imágenes/Wallpapers",
    "/home/omega/Imágenes/Screenshots",
    "/home/omega/Plantillas",
    "/home/omega/Documentos/Anotaciones",
    "/home/omega/Scripts",

    #   Config
    "/home/omega/.config/wthr",
    "/home/omega/.config/micro",
    "/home/omega/.config/kitty",
    "/home/omega/.config/i3",
    "/home/omega/.config/gtk-2.0",
    "/home/omega/.config/gtk-3.0",
    "/home/omega/.config/gtk-4.0",
    "/home/omega/.config/Code",
    "/home/omega/.config/BraveSoftware",

    #   Local
    "/home/omega/.certs",
    "/home/omega/.vscode",
    "/home/omega/.bash_aliases",
    "/home/omega/.bash_history",
    "/home/omega/.bashrc",
    "/home/omega/.profile",

    #       State
    "/home/omega/.local/state/bash",

    #       Scripts
    "/home/omega/.local/my_scripts",

    #       Share
    "/home/omega/.local/share/bkm",
    "/home/omega/.local/share/pswm",

    #           Icons
    "/home/omega/.local/share/icons/minecraft",
    "/home/omega/.local/share/icons/pyms",
    "/home/omega/.local/share/icons/upgrade",
    "/home/omega/.local/share/icons/performance",
    "/home/omega/.local/share/icons/powersave",
    "/home/omega/.local/share/icons/list-add_adjusted_clear.png",
"""
files = [
    "/home/omega/.local/my_scripts",
    "/home/omega/.local/share/bkm",
]


def check_dir_list(dirs: list) -> bool:
    """
    Check if a list of directories exist

    Args:
        dirs (list): List of directories to check

    Returns:
        bool: True if all directories exist, False otherwise

    Notes:
        This function is used to check if a list of directories exist
        before copying files to the backup directory
    """

    for dir in dirs:
        if not os.path.exists(dir):
            print(f"Directory '{dir}' does not exist")
            return False

    return True


def run_cmd(cmd) -> str:
    """
    Run a command and return the output

    Args:
        cmd (str): Command to run

    Returns:
        str: Output of the command

    Raises:
        CalledProcessError: If the command returns a non-zero exit status

    Notes:
        This function is used to run commands in the terminal
        and return the output of the command

        This function is used to run commands that are not
        available in the Python standard library or that require
        the use of the shell

        For example, the "cp" command is not available in the
        Python standard library and requires the use of the shell
        to copy directories and files, so it is necessary to use this
        function to run the command
    """
    try:
        output = subprocess.check_output(cmd, shell=True)
    except subprocess.CalledProcessError:
        output = ""
    return output.decode("utf-8").strip()


def create_empty(backup_dir: str) -> None:
    """
    Create empty containers for the files to be backed up

    Args:
        backup_dir (str): Directory where the backup will be stored

    Notes:
        This function is used to create empty directories and files
        so that the files can be copied to the backup directory
        without having to create the directories and files manually

        This function is also useful for files that are created by the user
        but are not created by the user

        For example, if the user has a file in the directory
        "/home/omega/.local/share/pswm/pswm.db"
        and the directory "/home/omega/.local/share/pswm" does not exist
        then the file cannot be copied to the backup directory
        because the directory does not exist
    """
    for file in files:
        try:
            file_path = "/".join(file.split("/")[:-1])
        except IndexError:
            file_path = ""

        file_path = backup_dir + file_path

        # Make the directory if it doesn't exist
        os.makedirs(file_path, exist_ok=True)


def main() -> int:
    try:
        backup_dir = str(sys.argv[1]) + f"/backup_{round(time.time())}"
    except IndexError:
        backup_dir = os.getcwd() + f"/backup_{round(time.time())}"

    print("Checking directories...")
    if not check_dir_list(files):
        print("Some directories do not exist")
        print("Exiting...")
        exit(1)

    print("All directories exist")

    print("Creating backup directory...")
    os.mkdir(backup_dir)

    print("Creating empty containers...")
    create_empty(backup_dir)

    print("Backing up files...")
    for file in files:
        cmd = f"cp -r '{file}' '{backup_dir}{file}'"
        out = run_cmd(cmd)

        if out:
            print("--------------------------------")
            print(f"COMMAND: {cmd}")
            print(f"RETURNED: {out}")
            print("--------------------------------")

    print("Checking backup directory...")
    bak_files = [str(backup_dir + file) for file in files]

    if not check_dir_list(bak_files):
        print("Some directories could not be backed up")
        print("Exiting...")
        exit(1)

    exit(0)


if __name__ == "__main__":
    main()
